name: Cleanup merged branches

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      author:
        description: 'Author of PRs to clean up branches for'
        default: 'github-actions[bot]'
        required: false
        type: string

permissions:
  contents: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    env:
      PR_AUTHOR: ${{ github.event.inputs.author || 'github-actions[bot]' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Delete merged branches created by specified author
        run: |
          echo "Looking for merged PRs created by: $PR_AUTHOR"
          
          echo "Fetching merged pull requests"
          PR_DATA=$(gh pr list --state merged --author "$PR_AUTHOR" --json headRefName,number,author,title --limit 20)
          
          if [ "$PR_DATA" = "[]" ]; then
            echo "No merged PRs found for author: $PR_AUTHOR"
            exit 0
          fi
          
          echo "Extracting branch names"
          BRANCHES=$(echo "$PR_DATA" | jq -r --arg author "$PR_AUTHOR" '.[] | select(.author.login == $author) | .headRefName')
          
          if [ -z "$BRANCHES" ]; then
            echo "No branches found after filtering by author"
            exit 0
          fi
          
          echo "Found branches to potentially delete"
          echo "$BRANCHES"
          
          echo "$BRANCHES" | while read branch; do
            if [ ! -z "$branch" ] && [ "$branch" != "null" ]; then
              echo "Processing branch: $branch"
          
              if git ls-remote --exit-code --heads origin "$branch" >/dev/null 2>&1; then
                echo "Branch $branch exists remotely"
                echo "Ô∏èDeleting branch: $branch"
          
                if git push origin --delete "$branch"; then
                  echo "Successfully deleted branch: $branch"
                else
                  echo "Failed to delete branch: $branch"
                fi
              else
                echo "Branch $branch already deleted or doesn't exist remotely"
              fi
              echo "---"
            else
              echo "Skipping empty/null branch name"
            fi
          done
          
          echo "-------------------------"
          echo "Cleanup completed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_AUTHOR: ${{ env.PR_AUTHOR }}